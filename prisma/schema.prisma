// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// @seed="tsx prisma/seed.ts"

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  isAdmin   Boolean  @default(false)
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses Address[]
  orders    Order[]
  reviews   Review[]

  @@map("users")
}

model Address {
  id          String   @id @default(cuid())
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Float
  salePrice     Float?   // Endirim qiym…ôti
  sku           String?  @unique
  stock         Int      @default(0)
  images        String[] // Array of image URLs
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  artikul       String?
  catalogNumber String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

model Order {
  id          String   @id @default(cuid())
  orderNumber String   @unique
  status      String   @default("pending") // pending, processing, shipped, delivered, cancelled
  totalAmount Float
  currency    String   @default("AZN")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User        @relation(fields: [userId], references: [id])
  items  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  isApproved Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}
