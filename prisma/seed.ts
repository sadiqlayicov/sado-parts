import { PrismaClient } from '@prisma/client';
import { hashPassword } from '../src/lib/auth';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Seeding database...');

  // Admin v…ô menecer istifad…ô√ßil…ôr
  const adminPassword = await hashPassword('admin123');
  const managerPassword = await hashPassword('manager123');
  await prisma.user.createMany({
    data: [
      {
        email: 'admin@sado-parts.ru',
        password: adminPassword,
        firstName: 'Admin',
        lastName: 'User',
        role: 'ADMIN',
        isApproved: true,
        isActive: true
      },
      {
        email: 'manager@sado-parts.ru',
        password: managerPassword,
        firstName: 'Manager',
        lastName: 'User',
        role: 'MANAGER',
        isApproved: true,
        isActive: true
      }
    ]
  });

  // 10 real m√º≈üt…ôri istifad…ô√ßi
  for (let i = 1; i <= 10; i++) {
    await prisma.user.create({
      data: {
        email: `customer${i}@example.com`,
        password: await hashPassword('password123'),
        firstName: `M√º≈üt…ôri${i}`,
        lastName: `Soyad${i}`,
        phone: `+994 50 000 0${i.toString().padStart(2, '0')}`,
        role: 'CUSTOMER',
        isApproved: i % 2 === 0,
        isActive: true
      }
    });
  }

  // 5 real kateqoriya
  const categories = await prisma.category.createMany({
    data: [
      { id: 'cat-engine', name: 'Dizel M√ºh…ôrrikl…ôr', description: 'Forklift √º√ß√ºn dizel m√ºh…ôrrik v…ô hiss…ôl…ôri' },
      { id: 'cat-transmission', name: 'Transmissiya', description: 'Transmissiya v…ô √∂t√ºr√ºc√º hiss…ôl…ôr' },
      { id: 'cat-hydraulic', name: 'Hidravlika', description: 'Hidravlik sistem v…ô hiss…ôl…ôr' },
      { id: 'cat-electrical', name: 'Elektrik', description: 'Elektrik v…ô akkumulyator hiss…ôl…ôri' },
      { id: 'cat-brakes', name: '∆èyl…ôc Sistemi', description: '∆èyl…ôc v…ô t…ôhl√ºk…ôsizlik hiss…ôl…ôri' }
    ]
  });

  // 100+ real m…ôhsul (forklift ehtiyat hiss…ôl…ôri)
  const brands = ['Toyota', 'Komatsu', 'Nissan', 'Mitsubishi', 'Hyundai', 'Hyster', 'Caterpillar', 'Clark', 'Doosan', 'Jungheinrich'];
  const productNames = [
    'M√ºh…ôrrik por≈üeni', 'Yaƒü filtri', 'Hava filtri', 'Yanacaq nasosu', 'Turbina', 'Qaz paylayƒ±cƒ± k…ôm…ôr', 'Vana', 'Silindr ba≈ülƒ±ƒüƒ±',
    'Hidravlik silindr', 'Hidravlik nasos', 'Hidravlik ≈ülanq', 'Hidravlik filtr', 'Hidravlik √ß…ôn',
    'Quru mufta', 'Ya≈ü mufta', 'Kardan val', 'Reduktor', '∆èsas di≈üli',
    '∆èyl…ôc b…ôndi', '∆èyl…ôc diski', '∆èyl…ôc silindri', '∆èyl…ôc mayesi',
    'Starter', 'Generator', 'Akkumulyator', 'Fara', 'D√∂nm…ô i≈üƒ±ƒüƒ±',
    'Rul √ßarxƒ±', 'Rul ucu', 'Rul mexanizmi',
    'Amortizator', 'Yay', 'Qol',
    'T…ôk…ôr', '≈ûin', 'Kamera',
    'Kabin', 'Qapƒ±', '≈û√º≈ü…ô',
    'Standart √ß…ông…ôl', 'Uzun √ß…ông…ôl', 'Baraban tutucu',
    'M√ºh…ôrrik yaƒüƒ±', 'Hidravlik yaƒü', '∆èyl…ôc mayesi', 'Soyuducu maye'
  ];
  let skuCounter = 1000;
  for (let i = 1; i <= 100; i++) {
    const catIdx = Math.floor((i - 1) / 20); // 5 kateqoriya √ºzr…ô b√∂l√º≈üd√ºr
    const brand = brands[i % brands.length];
    const name = productNames[i % productNames.length];
    await prisma.product.create({
      data: {
        name: `${brand} ${name}`,
        description: `${brand} markalƒ± ${name.toLowerCase()} forklift √º√ß√ºn orijinal ehtiyat hiss…ôdir.`,
        price: 5000 + Math.floor(Math.random() * 45000),
        sku: `SKU-${skuCounter + i}`,
        stock: 5 + Math.floor(Math.random() * 50),
        categoryId: `cat-${['engine','transmission','hydraulic','electrical','brakes'][catIdx]}`,
        isActive: true,
        isFeatured: i % 10 === 0
      }
    });
  }

  console.log('‚úÖ Database seeded successfully!');
}

main()
  .catch((e) => {
    console.error('‚ùå Seeding error:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  }); 