const { Client } = require('pg');

async function approveAllUsers() {
  console.log('üîß B√ºt√ºn m√∂vcud m√º≈üt…ôril…ôri t…ôsdiql…ôyir…ôm...');
  
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
  });

  try {
    await client.connect();
    console.log('‚úÖ Veril…ônl…ôr bazasƒ±na qo≈üuldu!');
    
    // B√ºt√ºn m√º≈üt…ôril…ôri t…ôsdiql…ô
    const result = await client.query(`
      UPDATE users 
      SET "isApproved" = true, "updatedAt" = NOW() 
      WHERE role = 'CUSTOMER' AND "isApproved" = false
    `);
    
    console.log(`‚úÖ ${result.rowCount} m√º≈üt…ôri t…ôsdiql…ôndi!`);
    
    // T…ôsdiql…ônmi≈ü m√º≈üt…ôril…ôrin sayƒ±nƒ± yoxla
    const approvedCount = await client.query(`
      SELECT COUNT(*) as count 
      FROM users 
      WHERE role = 'CUSTOMER' AND "isApproved" = true
    `);
    
    console.log(`üìä C…ômi ${approvedCount.rows[0].count} t…ôsdiql…ônmi≈ü m√º≈üt…ôri var`);
    
    // Bloklanmƒ±≈ü m√º≈üt…ôril…ôrin sayƒ±nƒ± yoxla
    const blockedCount = await client.query(`
      SELECT COUNT(*) as count 
      FROM users 
      WHERE role = 'CUSTOMER' AND "isApproved" = false
    `);
    
    console.log(`üìä C…ômi ${blockedCount.rows[0].count} bloklanmƒ±≈ü m√º≈üt…ôri var`);
    
  } catch (error) {
    console.error('‚ùå X…ôta ba≈ü verdi:', error.message);
  } finally {
    await client.end();
  }
}

approveAllUsers(); 