'use client';

import Link from 'next/link';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '../../components/AuthProvider';
import { useCart } from '../../components/CartProvider';

interface CartItem {
  id: string;
  productId: string;
  name: string;
  description: string;
  price: number;
  salePrice: number;
  images: string[];
  stock: number;
  sku: string;
  categoryName: string;
  quantity: number;
  totalPrice: number;
  totalSalePrice: number;
  createdAt: string;
}

export default function CartPage() {
  const [checkoutLoading, setCheckoutLoading] = useState(false);
  const { user, isAuthenticated, isApproved, calculateDiscountedPrice } = useAuth();
  const { 
    cartItems, 
    cartItemsCount, 
    totalPrice, 
    totalSalePrice, 
    savings, 
    refreshCart,
    updateQuantity,
    removeFromCart,
    clearCart,
    isLoading
  } = useCart();
  const router = useRouter();

  // Function to translate product names and categories from Azerbaijani to Russian
  const translateProductData = (item: any) => {
    const translations: { [key: string]: string } = {
      // Product names
      'Clark Amortizator d…ôsti': '–ö–æ–º–ø–ª–µ–∫—Ç –∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤ Clark',
      'Dizel M√ºh…ôrrikl…ôr': '–î–∏–∑–µ–ª—å–Ω—ã–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏',
      'Hydraulic Sistem': '–ì–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞',
      'Transmission': '–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è',
      'Brake Sistemi': '–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
      'Electrical Sistem': '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞',
      'Steering Sistem': '–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
      'Engine Parts': '–î–µ—Ç–∞–ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è',
      'Hydraulic Systems': '–ì–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã',
      'Tires & Wheels': '–®–∏–Ω—ã –∏ –∫–æ–ª–µ—Å–∞',
      'Filters': '–§–∏–ª—å—Ç—Ä—ã',
      'Lubricants': '–°–º–∞–∑–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
    };

    return {
      ...item,
      name: translations[item.name] || item.name,
      categoryName: translations[item.categoryName] || item.categoryName
    };
  };

  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/login');
      return;
    }
  }, [isAuthenticated, router]);

  const handleUpdateQuantity = async (cartItemId: string, quantity: number) => {
    if (!user?.id) return;
    
    try {
      console.log('Updating quantity for cartItemId:', cartItemId, 'to quantity:', quantity);
      await updateQuantity(cartItemId, quantity);
      console.log('Quantity updated successfully');
    } catch (error) {
      console.error('Miqdar yenil…ôm…ô x…ôtasƒ±:', error);
    }
  };

  const handleRemoveFromCart = async (cartItemId: string) => {
    if (!user?.id) return;
    
    try {
      console.log('Removing cart item:', cartItemId);
      await removeFromCart(cartItemId);
      console.log('Cart item removed successfully');
    } catch (error) {
      console.error('M…ôhsul silm…ô x…ôtasƒ±:', error);
    }
  };

  const handleClearCart = async () => {
    if (!user?.id) return;
    
    if (!confirm('S…ôb…ôti tamamil…ô t…ômizl…ôm…ôk ist…ôdiyiniz…ô …ôminsiniz?')) {
      return;
    }
    
    try {
      console.log('Clearing cart for user:', user.id);
      const response = await fetch('/api/cart/clear', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: user.id }),
      });
      
      if (response.ok) {
        console.log('Cart cleared successfully');
        await refreshCart(); // S…ôb…ôti yenil…ô
        alert('S…ôb…ôt uƒüurla t…ômizl…ôndi');
      } else {
        console.error('Failed to clear cart');
        alert('S…ôb…ôti t…ômizl…ôm…ô zamanƒ± x…ôta ba≈ü verdi');
      }
    } catch (error) {
      console.error('S…ôb…ôt t…ômizl…ôm…ô x…ôtasƒ±:', error);
      alert('S…ôb…ôti t…ômizl…ôm…ô zamanƒ± x…ôta ba≈ü verdi');
    }
  };

  const handleCheckout = async () => {
    if (!user?.id || cartItems.length === 0) {
      alert('–î–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log('Starting checkout process...');
    console.log('User ID:', user.id);
    console.log('Cart items count:', cartItems.length);
    console.log('Cart items:', cartItems);
    
    // Check if cart items have required data
    const validCartItems = cartItems.filter(item => 
      item.id && item.productId && item.name && item.price && item.quantity
    );
    
    console.log('Valid cart items:', validCartItems);
    
    if (validCartItems.length === 0) {
      alert('–í –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö');
      return;
    }
    
    setCheckoutLoading(true);
    
    try {
      // Generate order number
      const orderNumber = `SADO-${Date.now()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}`;
      
      // Calculate total amount
      const totalAmount = isApproved && user && user.discountPercentage > 0 
        ? totalSalePrice 
        : totalPrice;
      
      // Transform cart items to order items format
      const items = validCartItems.map(item => {
        const translatedItem = translateProductData(item);
        return {
          productId: item.productId,
          name: translatedItem.name,
          sku: item.sku,
          categoryName: translatedItem.categoryName,
          quantity: item.quantity,
          price: isApproved && user && user.discountPercentage > 0 
            ? calculateDiscountedPrice(item.price, null)
            : item.price,
          totalPrice: isApproved && user && user.discountPercentage > 0 
            ? calculateDiscountedPrice(item.price, null) * item.quantity
            : item.totalPrice
        };
      });
      
      // Sifari≈ü yarat
      const requestBody = {
        userId: user.id,
        items: items,
        totalAmount: totalAmount,
        notes: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
        orderNumber: orderNumber
      };
      
      console.log('Sending order request with body:', requestBody);
      
      const response = await fetch('/api/orders', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody)
      });
      
      console.log('Order response status:', response.status);
      
      const data = await response.json();
      console.log('Order response data:', data);
      
      if (data.success) {
        // Sifari≈ü uƒüurla yaradƒ±ldƒ±
        console.log('Order created successfully:', data.order);
        setCheckoutLoading(false);
        
        // S…ôb…ôti t…ômizl…ôm…ô - yalnƒ±z sifari≈ü tamamlandƒ±qdan sonra
        // S…ôb…ôti t…ômizl…ômirik, √ß√ºnki istifad…ô√ßi "Alƒ±≈ü-veri≈ü…ô davam et" d√ºym…ôsini basa bil…ôr
        // S…ôb…ôt yalnƒ±z sifari≈ü tamamlandƒ±qdan sonra t…ômizl…ôn…ôc…ôk
        
        // Hesab-faktura s…ôhif…ôsin…ô y√∂nl…ôndir
        router.push(`/invoice?orderId=${data.order.id}`);
        
      } else {
        console.error('Order creation failed:', data.error);
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞:', error);
      setCheckoutLoading(false);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  if (isLoading) {
    return (
      <main className="min-h-screen bg-gradient-to-br from-[#0f172a] via-[#1e293b] to-[#0ea5e9] text-white p-8">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-4xl font-bold mb-8 neon-text">–ö–æ—Ä–∑–∏–Ω–∞</h1>
          <div className="bg-white/10 rounded-xl p-8 text-center shadow-lg">
            <div className="text-2xl">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
          </div>
        </div>
      </main>
    );
  }

  if (cartItems.length === 0) {
    return (
      <main className="min-h-screen bg-gradient-to-br from-[#0f172a] via-[#1e293b] to-[#0ea5e9] text-white p-8">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-4xl font-bold mb-8 neon-text">–ö–æ—Ä–∑–∏–Ω–∞</h1>
          
          <div className="bg-white/10 rounded-xl p-8 text-center shadow-lg">
            <div className="text-6xl mb-4">üõí</div>
            <h2 className="text-2xl font-semibold mb-4">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
            <p className="text-lg mb-6">–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</p>
            <Link 
              href="/catalog" 
              className="px-8 py-3 rounded-lg bg-cyan-500 hover:bg-cyan-600 font-semibold text-lg transition"
            >
              –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
            </Link>
          </div>
        </div>
      </main>
    );
  }

  return (
    <main className="min-h-screen bg-gradient-to-br from-[#0f172a] via-[#1e293b] to-[#0ea5e9] text-white p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-4xl font-bold mb-8 neon-text">–ö–æ—Ä–∑–∏–Ω–∞</h1>
        
        <div className="bg-white/10 rounded-xl p-6 shadow-lg">
          {/* M…ôhsullar siyahƒ±sƒ± */}
          <div className="space-y-4 mb-6">
            {cartItems.map((item) => {
              const translatedItem = translateProductData(item);
              return (
                <div key={item.id} className="flex items-center justify-between p-4 bg-white/5 rounded-lg">
                  <div className="flex-1">
                    <h3 className="text-lg font-semibold">{translatedItem.name}</h3>
                    <p className="text-sm text-gray-300">–ê—Ä—Ç–∏–∫—É–ª: {translatedItem.sku}</p>
                    <p className="text-sm text-gray-300">
                      –¶–µ–Ω–∞: {isApproved && user && user.discountPercentage > 0 ? (
                        <span>
                          <span className="line-through text-gray-400">{translatedItem.price.toLocaleString()}</span>
                          <span className="text-green-400 ml-2">{calculateDiscountedPrice(translatedItem.price, null).toLocaleString()}</span>
                        </span>
                      ) : (
                        translatedItem.price.toLocaleString()
                      )} ‚ÇΩ
                    </p>
                    <p className="text-sm text-gray-300">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {translatedItem.categoryName}</p>
                  </div>
                
                  <div className="flex items-center gap-4">
                    <div className="flex items-center gap-2">
                      <button 
                        onClick={() => handleUpdateQuantity(item.id, item.quantity - 1)}
                        disabled={item.quantity <= 1}
                        className="w-8 h-8 rounded bg-cyan-500 hover:bg-cyan-600 disabled:opacity-50 flex items-center justify-center transition"
                      >
                        -
                      </button>
                      <span className="w-12 text-center">{item.quantity}</span>
                      <button 
                        onClick={() => handleUpdateQuantity(item.id, item.quantity + 1)}
                        disabled={item.quantity >= item.stock}
                        className="w-8 h-8 rounded bg-cyan-500 hover:bg-cyan-600 disabled:opacity-50 flex items-center justify-center transition"
                      >
                        +
                      </button>
                    </div>
                    
                    <div className="text-right">
                      <div className="text-lg font-semibold">
                        {isApproved && user && user.discountPercentage > 0 ? 
                          (calculateDiscountedPrice(item.price, null) * item.quantity).toLocaleString() : 
                          item.totalPrice.toLocaleString()
                        } ‚ÇΩ
                      </div>
                      {isApproved && user && user.discountPercentage > 0 && (
                        <div className="text-sm text-green-400">
                          {item.totalPrice - (calculateDiscountedPrice(item.price, null) * item.quantity)} ‚ÇΩ —ç–∫–æ–Ω–æ–º–∏—è
                        </div>
                      )}
                    </div>
                    
                    <button 
                      onClick={() => handleRemoveFromCart(item.id)}
                      className="text-red-400 hover:text-red-600 transition"
                    >
                      ‚úï
                    </button>
                  </div>
                </div>
              );
            })}
          </div>
          
          {/* √úmumi */}
          <div className="border-t border-white/20 pt-6 mb-6">
            <div className="space-y-2">
              <div className="flex justify-between items-center text-lg">
                <span>–¢–æ–≤–∞—Ä—ã: {cartItemsCount}</span>
                <span>–ò—Ç–æ–≥–æ: {totalPrice.toLocaleString()} ‚ÇΩ</span>
              </div>
              {isApproved && user && user.discountPercentage > 0 && (
                <div className="flex justify-between items-center text-green-400">
                  <span>–≠–∫–æ–Ω–æ–º–∏—è:</span>
                  <span>-{savings.toLocaleString()} ‚ÇΩ</span>
                </div>
              )}
              <div className="flex justify-between items-center text-xl font-bold border-t border-white/20 pt-2">
                <span>–ö –æ–ø–ª–∞—Ç–µ:</span>
                <span>{isApproved && user && user.discountPercentage > 0 ? totalSalePrice.toLocaleString() : totalPrice.toLocaleString()} ‚ÇΩ</span>
              </div>
            </div>
          </div>
          
          {/* D√ºym…ôl…ôr */}
          <div className="flex flex-col sm:flex-row gap-4">
            <Link 
              href="/catalog" 
              className="px-6 py-3 rounded-lg bg-white/10 hover:bg-cyan-600 font-semibold text-center transition"
            >
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
            </Link>
            
            <Link 
              href="/profile" 
              className="px-6 py-3 rounded-lg bg-white/10 hover:bg-cyan-600 font-semibold text-center transition"
            >
              –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
            </Link>
            
            <button 
              onClick={handleClearCart}
              className="px-6 py-3 rounded-lg bg-red-500 hover:bg-red-600 font-semibold text-center transition"
            >
              –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
            </button>
            
            <button 
              onClick={handleCheckout}
              disabled={checkoutLoading}
              className="px-8 py-3 rounded-lg bg-cyan-500 hover:bg-cyan-600 font-semibold text-lg transition disabled:opacity-50 flex-1"
            >
              {checkoutLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...' : '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç'}
            </button>
          </div>
        </div>
      </div>
    </main>
  );
} 